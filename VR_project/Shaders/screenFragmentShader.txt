#version 330 core
in vec2 TexCoords;
out vec4 FragColor;

uniform sampler2D colorTexture;
uniform sampler2D normalTexture;

uniform float far_plane;

uniform sampler2D depthTexture;

uniform vec3 backgroundColor;
uniform float blur;

const float offset_x = 1.0 / 1920.0;  
const float offset_y = 1.0 / 1080.0;

void main()
{
    vec2 offsets[9] = vec2[](
        vec2(-offset_x,  offset_y), // top-left
        vec2( 0.0f,    offset_y), // top-center
        vec2( offset_x,  offset_y), // top-right
        vec2(-offset_x,  0.0f),   // center-left
        vec2( 0.0f,    0.0f),   // center-center
        vec2( offset_x,  0.0f),   // center-right
        vec2(-offset_x, -offset_y), // bottom-left
        vec2( 0.0f,   -offset_y), // bottom-center
        vec2( offset_x, -offset_y)  // bottom-right    
    );

    float sx[9] = float[]( 
        1.0, 2.0, 1.0, 
        0.0, 0.0, 0.0, 
        -1.0, -2.0, -1.0 
    );
    float sy[9] = float[]( 
        1.0, 0.0, -1.0, 
        2.0, 0.0, -2.0, 
        1.0, 0.0, -1.0 
    );
    
    vec3 sampleNormTex[9];
    vec3 sampleColorTex[9];

    for(int i = 0; i < 9; i++)
    {
        sampleNormTex[i] = vec3(texture(normalTexture, TexCoords.st + offsets[i]));
        sampleColorTex[i] = vec3(texture(colorTexture, TexCoords.st + offsets[i]));
    }

    vec3 NormalGradX = vec3(0.0);
    vec3 ColorGradX = vec3(0.0);
    float ClarityGradX = 0.0;
    for (int i = 0; i < 9; i++){
        NormalGradX += sx[i] * sampleNormTex[i];
        ColorGradX += sx[i] * sampleColorTex[i];
        ClarityGradX += sx[i] * length(sampleColorTex[i]);
    }
    vec3 NormalGradY = vec3(0.0);
    vec3 ColorGradY = vec3(0.0);
    float ClarityGradY = 0.0;
    for (int i = 0; i < 9; i++){
        NormalGradY += sy[i] * sampleNormTex[i];
        ColorGradY += sy[i] * sampleColorTex[i];
        ClarityGradY += sy[i] * length(sampleColorTex[i]);
    }
    float NormalGrad = sqrt(pow(length(NormalGradX), 2.0)+pow(length(NormalGradY), 2.0));
    float ColorGrad = sqrt(pow(length(ColorGradX), 2.0)+pow(length(ColorGradY), 2.0));
    float ClarityGrad = sqrt(pow(ClarityGradX,2.0) + pow(ClarityGradY,2.0));

    float EdgeDetectionGrad = max(NormalGrad, ColorGrad);

    vec3 initialColor = vec3(texture(colorTexture, TexCoords.st));

    float Clarity = length(initialColor);
    vec3 col = initialColor - vec3(EdgeDetectionGrad);

    float depth = texture(depthTexture, TexCoords.st).r;
    depth*=far_plane;
    if (depth < 50.0) depth = 50.0;
    depth/=far_plane;

    if (blur == 1.0) col = mix(col, backgroundColor, depth);

    FragColor = vec4(col,1.0);
}  