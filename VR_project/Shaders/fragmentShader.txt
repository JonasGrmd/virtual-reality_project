#version 330 core
out vec4 FragColor;
precision mediump float; 

in vec3 v_frag_coord;
in vec3 v_normal; 

uniform vec3 u_view_pos; 

//What information do you need for the light ? (position, strength, ...)
uniform float u_ambient;
uniform float u_diffuse;
uniform float u_specular;
uniform float u_emissive; 
uniform vec3 u_light_pos;
uniform vec3 lightColour;
//What information do you need about the object ?
uniform vec3 materialColour; 
uniform float u_shininess;

void main() { 
//Compute each of the component needed (specular light, diffuse light, attenuation,...)
	vec3 L = normalize(u_light_pos - v_frag_coord);
	vec3 N = v_normal;
	vec3 R = (reflect(-L,N));
	vec3 V = normalize(u_view_pos - v_frag_coord);

	vec3 ambient = u_ambient*materialColour;
	float diff = max(dot(N,L), 0.0);
	vec3 diffuse = diff*lightColour;
	float spec = pow(max(dot(R,V),0.0),u_shininess);
	vec3 specular = u_specular*spec*lightColour;

	float attenuation = 1.0/pow(length(u_light_pos - v_frag_coord),2);

	//Compute the value for the light 
	FragColor = vec4(materialColour*(ambient + u_emissive + (diffuse + specular)*attenuation), 1.0); 
};